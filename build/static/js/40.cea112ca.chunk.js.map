{"version":3,"sources":["../../src/index.ts","../../src/provider.ts","../../src/utils.ts"],"names":[],"mappings":"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","file":"static/js/40.cea112ca.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nvar provider_1 = require(\"./provider\");\nObject.defineProperty(exports, \"SafeAppProvider\", { enumerable: true, get: function () { return provider_1.SafeAppProvider; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk) {\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return `0x${this.chainId.toString(16)}`;\n            case 'personal_sign': {\n                const [message, address] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(message);\n                return '0x';\n            }\n            case 'eth_sign': {\n                const [address, messageHash] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(messageHash);\n                return '0x';\n            }\n            case 'eth_sendTransaction':\n                const tx = Object.assign({ value: '0', data: '0x' }, params[0]);\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getTransactionCount':\n                return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return this.sdk.eth.getEstimateGas(params[0]);\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            case 'eth_gasPrice':\n                return this.sdk.eth.getGasPrice();\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLowerCase = void 0;\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nexports.getLowerCase = getLowerCase;\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}